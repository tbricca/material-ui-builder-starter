
# Material-UI Guidelines
Import MUI components from @mui/material
Use theme.vars for color values with dark mode support
Follow responsive design patterns with breakpoints (xs, sm, md, lg, xl)
Apply TypeScript types for all component props

# Component Structure
Place reusable components in src/components/
Dashboard components go in src/dashboard/components/
CRM components go in src/crm/components/
Reference example patterns in example-code/pages/
Use functional components with TypeScript interfaces for props

# Theme and Styling
Use shared theme from src/shared-theme/AppTheme.tsx
Apply custom theme extensions from src/dashboard/theme/customizations/
Use sx prop for component-specific styles
Follow Material-UI theming best practices
Avoid inline styles - prefer sx prop or styled components

# Form Patterns
Use TextField, Select, DatePicker from MUI
Implement real-time validation with error states
Show loading states during submission
Reference forms-example.tsx for validation patterns
All forms should have proper error handling and user feedback

# Data Tables
Use Material-UI Table components
Implement sorting, filtering, and pagination
Add CRUD operations with dialogs
Reference tables-example.tsx for table patterns
Ensure tables are responsive and work on mobile devices

# Dashboard Layouts
Use Grid system for responsive layouts
Implement StatCard pattern for metrics display
Add charts using Material-UI X Charts
Reference dashboard-example.tsx for layout patterns
Keep dashboard widgets modular and reusable

# Responsive Design
Start with mobile design (xs breakpoint)
Use Material-UI breakpoints: xs (0px), sm (600px), md (900px), lg (1200px), xl (1536px)
Apply responsive Grid column spans
Reference layouts-example.tsx for responsive patterns
Test on multiple screen sizes before submitting

# TypeScript Best Practices
Import types from src/types/
Define interfaces for component props
Use proper type annotations for state and functions
Avoid using 'any' type - use 'unknown' if type is truly unknown
Export types that are reused across components

# File Organization
Keep files focused and under 300 lines
Extract complex logic into custom hooks
Place shared utilities in src/utils/
Create index.ts files for clean exports

# Code Quality
Add JSDoc comments to all exported functions
Use meaningful variable and function names
Keep component functions small and focused
Avoid deeply nested components - extract to separate files

# State Management
Use React Query for server state
Use React hooks (useState, useEffect) for local state
Avoid prop drilling - use context when needed
Keep state as close to where it's used as possible

# Files to Ignore

node_modules/
dist/
build/
.git/
.test.tsx
.spec.tsx